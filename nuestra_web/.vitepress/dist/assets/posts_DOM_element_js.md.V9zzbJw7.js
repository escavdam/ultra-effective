import{_ as e,c as s,o as a,V as i}from"./chunks/framework.fZt_wkQb.js";const m=JSON.parse('{"title":"DOM (Document Object Model)","description":"","frontmatter":{},"headers":[],"relativePath":"posts/DOM_element_js.md","filePath":"posts/DOM_element_js.md"}'),t={name:"posts/DOM_element_js.md"},n=i(`<h1 id="dom-document-object-model" tabindex="-1">DOM (Document Object Model) <a class="header-anchor" href="#dom-document-object-model" aria-label="Permalink to &quot;DOM (Document Object Model)&quot;">​</a></h1><p>El DOM es un modelo que indica como se debe estructurar las pásginas o las aplicaciones web. Estas se construyen y se interpretan de forma secuencial, por lo que puede pasar esque cuando se intente acceder a un elemento y aún no este disponible.</p><p>El objeto inicial del que parten todos los objetos, en el DOM, es el objeto <strong>document</strong> y de este objeto se van construyendo y definiendo los demás. El objeto <strong>document</strong> de JavaScript, representa a la etiqueta <strong>html</strong>.</p><h2 id="_1-los-nodos-y-sus-tipos" tabindex="-1">1. Los nodos y sus tipos: <a class="header-anchor" href="#_1-los-nodos-y-sus-tipos" aria-label="Permalink to &quot;1. Los nodos y sus tipos:&quot;">​</a></h2><p>Aunque existe 12 tipos de nodos en JS, solo se suelen utilizar 5 porque son los qu más se necesitan para realizar las acciones u operaciones cuando se trabaja con páginas o aplicaciones web.</p><table><thead><tr><th>Tipo nodo</th><th>Descripción</th></tr></thead><tbody><tr><td>Document</td><td>Nodo raíz del que dependen todos los demás.</td></tr><tr><td>Element</td><td>Son los elementos representados por las etiquetas HTML.</td></tr><tr><td>Attr</td><td>Son las propiedades de las etiquetas asociadas a cada Element.</td></tr><tr><td>Text</td><td>Son los valores o textos contenidos dentro de las etiquetas del HTML</td></tr><tr><td>Comment</td><td>Son los que se ha generadoa partir de etiquetas doctype y que se transforman en nodos o han sido creados como comentarios</td></tr></tbody></table><h2 id="_2-seleccion-de-elementos" tabindex="-1">2. Selección de elementos <a class="header-anchor" href="#_2-seleccion-de-elementos" aria-label="Permalink to &quot;2. Selección de elementos&quot;">​</a></h2><ul><li>Para acceder a los elementos del DOM debemos recurrir a los métodos y propiedades proporcionadas por el DOM. Por ejemplo:</li></ul><div class="language-JS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;table&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ul><li>Una vez seleccionados los nodos se puede modificar su contenido o estilo. De este modo:</li></ul><div class="language-JS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">elemento.innerHTML  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;Hola mundo&quot;</span></span></code></pre></div><h2 id="_3-eventos" tabindex="-1">3. Eventos <a class="header-anchor" href="#_3-eventos" aria-label="Permalink to &quot;3. Eventos&quot;">​</a></h2><p>El DOM permite vinculare eventos a elementos del documento. Los eventos representan acciones o interacciones, como hacer click en un botón, etc. JS puede escuchar estos eventos y ejecutar un código en respuesta. Este es un ejemplo:</p><div class="language-JS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">elemento.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;click&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;click!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="_4-creacion-y-eliminacion-de-nodos" tabindex="-1">4. Creación y Eliminación de Nodos <a class="header-anchor" href="#_4-creacion-y-eliminacion-de-nodos" aria-label="Permalink to &quot;4. Creación y Eliminación de Nodos&quot;">​</a></h2><ul><li>JS permite crear nuevos nodos y agregarlos al document.</li></ul><div class="language-JS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  elemento  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;div&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><ul><li>También se permiten eliminarlos.</li></ul><div class="language-JS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">elemento.parentNode.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(elemento);</span></span></code></pre></div>`,19),o=[n];function l(d,p,r,c,h,k){return a(),s("div",null,o)}const E=e(t,[["render",l]]);export{m as __pageData,E as default};
